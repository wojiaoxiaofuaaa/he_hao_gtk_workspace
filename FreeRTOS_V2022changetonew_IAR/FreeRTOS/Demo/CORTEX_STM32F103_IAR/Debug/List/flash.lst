###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         02/May/2024  10:28:28
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        E:\code\free_rtos_revision\FreeRTOS_V2022changetonew_IAR\FreeRTOS\Demo\Common\Minimal\flash.c
#    Command line =  
#        -f C:\Users\4444\AppData\Local\Temp\EWF91B.tmp
#        (E:\code\free_rtos_revision\FreeRTOS_V2022changetonew_IAR\FreeRTOS\Demo\Common\Minimal\flash.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN
#        E:\code\free_rtos_revision\FreeRTOS_V2022changetonew_IAR\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\List
#        --diag_suppress Pa082,pe191 -o
#        E:\code\free_rtos_revision\FreeRTOS_V2022changetonew_IAR\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\tool\digital_tool_keil_common_use\keil\IAR\arm\inc\c\DLib_Config_Full.h
#        -I
#        E:\code\free_rtos_revision\FreeRTOS_V2022changetonew_IAR\FreeRTOS\Demo\CORTEX_STM32F103_IAR\.\
#        -I
#        E:\code\free_rtos_revision\FreeRTOS_V2022changetonew_IAR\FreeRTOS\Demo\CORTEX_STM32F103_IAR\STM32F10xFWLib\inc\
#        -I
#        E:\code\free_rtos_revision\FreeRTOS_V2022changetonew_IAR\FreeRTOS\Demo\CORTEX_STM32F103_IAR\..\..\Source\include\
#        -I
#        E:\code\free_rtos_revision\FreeRTOS_V2022changetonew_IAR\FreeRTOS\Demo\CORTEX_STM32F103_IAR\..\common\include\
#        -Ol --use_c++_inline --require_prototypes)
#    Locale       =  C
#    List file    =  
#        E:\code\free_rtos_revision\FreeRTOS_V2022changetonew_IAR\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\List\flash.lst
#    Object file  =  
#        E:\code\free_rtos_revision\FreeRTOS_V2022changetonew_IAR\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\Obj\flash.o
#
###############################################################################

E:\code\free_rtos_revision\FreeRTOS_V2022changetonew_IAR\FreeRTOS\Demo\Common\Minimal\flash.c
      1          /*
      2           * FreeRTOS V202212.01
      3           * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
      4           *
      5           * Permission is hereby granted, free of charge, to any person obtaining a copy of
      6           * this software and associated documentation files (the "Software"), to deal in
      7           * the Software without restriction, including without limitation the rights to
      8           * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
      9           * the Software, and to permit persons to whom the Software is furnished to do so,
     10           * subject to the following conditions:
     11           *
     12           * The above copyright notice and this permission notice shall be included in all
     13           * copies or substantial portions of the Software.
     14           *
     15           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     16           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
     17           * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
     18           * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
     19           * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
     20           * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     21           *
     22           * https://www.FreeRTOS.org
     23           * https://github.com/FreeRTOS
     24           *
     25           */
     26          
     27          /**
     28           * This version of flash .c is for use on systems that have limited stack space
     29           * and no display facilities.  The complete version can be found in the
     30           * Demo/Common/Full directory.
     31           *
     32           * Three tasks are created, each of which flash an LED at a different rate.  The first
     33           * LED flashes every 200ms, the second every 400ms, the third every 600ms.
     34           *
     35           * The LED flash tasks provide instant visual feedback.  They show that the scheduler
     36           * is still operational.
     37           *
     38           */
     39          
     40          
     41          #include <stdlib.h>
     42          
     43          /* Scheduler include files. */
     44          #include "FreeRTOS.h"
     45          #include "task.h"
     46          
     47          /* Demo program include files. */
     48          #include "partest.h"
     49          #include "flash.h"
     50          
     51          #define ledSTACK_SIZE         configMINIMAL_STACK_SIZE
     52          #define ledNUMBER_OF_LEDS     ( 3 )
     53          #define ledFLASH_RATE_BASE    ( ( TickType_t ) 333 )
     54          
     55          /* Variable used by the created tasks to calculate the LED number to use, and
     56           * the rate at which they should flash the LED. */
     57          static volatile UBaseType_t uxFlashTaskNumber = 0;
     58          
     59          /* The task that is created three times. */
     60          static portTASK_FUNCTION_PROTO( vLEDFlashTask, pvParameters );
     61          
     62          /*-----------------------------------------------------------*/
     63          
     64          void vStartLEDFlashTasks( UBaseType_t uxPriority )
     65          {
     66              BaseType_t xLEDTask;
     67          
     68              /* Create the three tasks. */
     69              for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
     70              {
     71                  /* Spawn the task. */
     72                  xTaskCreate( vLEDFlashTask, "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
     73              }
     74          }
     75          /*-----------------------------------------------------------*/
     76          
     77          static portTASK_FUNCTION( vLEDFlashTask, pvParameters )
     78          {
     79              TickType_t xFlashRate, xLastFlashTime;
     80              UBaseType_t uxLED;
     81          
     82              /* The parameters are not used. */
     83              ( void ) pvParameters;
     84          
     85              /* Calculate the LED and flash rate. */
     86              portENTER_CRITICAL();
     87              {
     88                  /* See which of the eight LED's we should use. */
     89                  uxLED = uxFlashTaskNumber;
     90          
     91                  /* Update so the next task uses the next LED. */
     92                  uxFlashTaskNumber++;
     93              }
     94              portEXIT_CRITICAL();
     95          
     96              xFlashRate = ledFLASH_RATE_BASE + ( ledFLASH_RATE_BASE * ( TickType_t ) uxLED );
     97              xFlashRate /= portTICK_PERIOD_MS;
     98          
     99              /* We will turn the LED on and off again in the delay period, so each
    100               * delay is only half the total period. */
    101              xFlashRate /= ( TickType_t ) 2;
    102          
    103              /* We need to initialise xLastFlashTime prior to the first call to
    104               * vTaskDelayUntil(). */
    105              xLastFlashTime = xTaskGetTickCount();
    106          
    107              for( ; ; )
    108              {
    109                  /* Delay for half the flash period then turn the LED on. */
    110                  vTaskDelayUntil( &xLastFlashTime, xFlashRate );
    111                  vParTestToggleLED( uxLED );
    112          
    113                  /* Delay for half the flash period then turn the LED off. */
    114                  vTaskDelayUntil( &xLastFlashTime, xFlashRate );
    115                  vParTestToggleLED( uxLED );
    116              }
    117          } /*lint !e715 !e818 !e830 Function definition must be standard for task creation. */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   vLEDFlashTask
        16   -> vParTestToggleLED
        16   -> vPortEnterCritical
        16   -> vPortExitCritical
        16   -> xTaskDelayUntil
        16   -> xTaskGetTickCount
      24   vStartLEDFlashTasks
        24   -> xTaskCreate


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       8  ?_0
       4  uxFlashTaskNumber
      76  vLEDFlashTask
      36  vStartLEDFlashTasks

 
   4 bytes in section .bss
   8 bytes in section .rodata
 120 bytes in section .text
 
 120 bytes of CODE  memory
   8 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none

###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         02/May/2024  10:32:05
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        E:\code\free_rtos_revision\FreeRTOS_V2022changetonew_IAR\FreeRTOS\Demo\CORTEX_STM32F103_IAR\timertest.c
#    Command line =  
#        -f C:\Users\4444\AppData\Local\Temp\EW453D.tmp
#        (E:\code\free_rtos_revision\FreeRTOS_V2022changetonew_IAR\FreeRTOS\Demo\CORTEX_STM32F103_IAR\timertest.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN
#        E:\code\free_rtos_revision\FreeRTOS_V2022changetonew_IAR\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\List
#        --diag_suppress Pa082,pe191 -o
#        E:\code\free_rtos_revision\FreeRTOS_V2022changetonew_IAR\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\tool\digital_tool_keil_common_use\keil\IAR\arm\inc\c\DLib_Config_Full.h
#        -I
#        E:\code\free_rtos_revision\FreeRTOS_V2022changetonew_IAR\FreeRTOS\Demo\CORTEX_STM32F103_IAR\.\
#        -I
#        E:\code\free_rtos_revision\FreeRTOS_V2022changetonew_IAR\FreeRTOS\Demo\CORTEX_STM32F103_IAR\STM32F10xFWLib\inc\
#        -I
#        E:\code\free_rtos_revision\FreeRTOS_V2022changetonew_IAR\FreeRTOS\Demo\CORTEX_STM32F103_IAR\..\..\Source\include\
#        -I
#        E:\code\free_rtos_revision\FreeRTOS_V2022changetonew_IAR\FreeRTOS\Demo\CORTEX_STM32F103_IAR\..\common\include\
#        -Ol --use_c++_inline --require_prototypes)
#    Locale       =  C
#    List file    =  
#        E:\code\free_rtos_revision\FreeRTOS_V2022changetonew_IAR\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\List\timertest.lst
#    Object file  =  
#        E:\code\free_rtos_revision\FreeRTOS_V2022changetonew_IAR\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\Obj\timertest.o
#
###############################################################################

E:\code\free_rtos_revision\FreeRTOS_V2022changetonew_IAR\FreeRTOS\Demo\CORTEX_STM32F103_IAR\timertest.c
      1          /*
      2           * FreeRTOS V202212.01
      3           * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
      4           *
      5           * Permission is hereby granted, free of charge, to any person obtaining a copy of
      6           * this software and associated documentation files (the "Software"), to deal in
      7           * the Software without restriction, including without limitation the rights to
      8           * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
      9           * the Software, and to permit persons to whom the Software is furnished to do so,
     10           * subject to the following conditions:
     11           *
     12           * The above copyright notice and this permission notice shall be included in all
     13           * copies or substantial portions of the Software.
     14           *
     15           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     16           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
     17           * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
     18           * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
     19           * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
     20           * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     21           *
     22           * https://www.FreeRTOS.org
     23           * https://github.com/FreeRTOS
     24           *
     25           */
     26          
     27          /* High speed timer test as described in main.c. */
     28          
     29          /* Scheduler includes. */
     30          #include "FreeRTOS.h"
     31          
     32          /* Library includes. */
     33          #include "stm32f10x_lib.h"
     34          #include "stm32f10x_tim.h"
     35          #include "stm32f10x_map.h"
     36          
     37          /* The set frequency of the interrupt.  Deviations from this are measured as
     38          the jitter. */
     39          #define timerINTERRUPT_FREQUENCY		( ( unsigned short ) 20000 )
     40          
     41          /* The expected time between each of the timer interrupts - if the jitter was
     42          zero. */
     43          #define timerEXPECTED_DIFFERENCE_VALUE	( configCPU_CLOCK_HZ / timerINTERRUPT_FREQUENCY )
     44          
     45          /* The highest available interrupt priority. */
     46          #define timerHIGHEST_PRIORITY			( 0 )
     47          
     48          /* Misc defines. */
     49          #define timerMAX_32BIT_VALUE			( 0xffffffffUL )
     50          #define timerTIMER_1_COUNT_VALUE		( * ( ( unsigned long * ) ( TIMER1_BASE + 0x48 ) ) )
     51          
     52          /* The number of interrupts to pass before we start looking at the jitter. */
     53          #define timerSETTLE_TIME			5
     54          
     55          /*-----------------------------------------------------------*/
     56          
     57          /*
     58           * Configures the two timers used to perform the test.
     59           */
     60          void vSetupTimerTest( void );
     61          
     62          /* Interrupt handler in which the jitter is measured. */
     63          void vTimer2IntHandler( void );
     64          
     65          /* Stores the value of the maximum recorded jitter between interrupts. */
     66          volatile unsigned short usMaxJitter = 0;
     67          
     68          /*-----------------------------------------------------------*/
     69          
     70          void vSetupTimerTest( void )
     71          {
     72          unsigned long ulFrequency;
     73          TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
     74          NVIC_InitTypeDef NVIC_InitStructure;
     75          
     76          
     77          	/* Enable timer clocks */
     78          	RCC_APB1PeriphClockCmd( RCC_APB1Periph_TIM2, ENABLE );
     79          	RCC_APB1PeriphClockCmd( RCC_APB1Periph_TIM3, ENABLE );
     80          
     81          	/* Initialise data. */
     82          	TIM_DeInit( TIM2 );
     83          	TIM_DeInit( TIM3 );
     84          	TIM_TimeBaseStructInit( &TIM_TimeBaseStructure );
     85          
     86          	/* Time base configuration for timer 2 - which generates the interrupts. */
     87          	ulFrequency = configCPU_CLOCK_HZ / timerINTERRUPT_FREQUENCY;
     88          	TIM_TimeBaseStructure.TIM_Period = ( unsigned short ) ( ulFrequency & 0xffffUL );
     89          	TIM_TimeBaseStructure.TIM_Prescaler = 0x0;
     90          	TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;
     91          	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
     92          	TIM_TimeBaseInit( TIM2, &TIM_TimeBaseStructure );
     93          	TIM_ARRPreloadConfig( TIM2, ENABLE );
     94          
     95          
     96          	/* Configuration for timer 3 which is used as a high resolution time
     97          	measurement. */
     98          	TIM_TimeBaseStructure.TIM_Period = ( unsigned short ) 0xffff;
     99          	TIM_TimeBaseInit( TIM3, &TIM_TimeBaseStructure );
    100          	TIM_ARRPreloadConfig( TIM3, ENABLE );
    101          
    102          	/* Enable TIM2 IT.  TIM3 does not generate an interrupt. */
    103          	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQChannel;
    104          	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    105          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = timerHIGHEST_PRIORITY;
    106          	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    107          	NVIC_Init( &NVIC_InitStructure );
    108          	TIM_ITConfig( TIM2, TIM_IT_Update, ENABLE );
    109          
    110          	/* Finally, enable both timers. */
    111          	TIM_Cmd( TIM2, ENABLE );
    112          	TIM_Cmd( TIM3, ENABLE );
    113          }
    114          /*-----------------------------------------------------------*/
    115          
    116          void vTimer2IntHandler( void )
    117          {
    118          static unsigned short usLastCount = 0, usSettleCount = 0, usMaxDifference = 0;
    119          unsigned short usThisCount, usDifference;
    120          
    121          	/* Capture the free running timer 3 value as we enter the interrupt. */
    122          	usThisCount = TIM3->CNT;
    123          
    124          	if( usSettleCount >= timerSETTLE_TIME )
    125          	{
    126          		/* What is the difference between the timer value in this interrupt
    127          		and the value from the last interrupt. */
    128          		usDifference = usThisCount - usLastCount;
    129          
    130          		/* Store the difference in the timer values if it is larger than the
    131          		currently stored largest value.  The difference over and above the
    132          		expected difference will give the 'jitter' in the processing of these
    133          		interrupts. */
    134          		if( usDifference > usMaxDifference )
    135          		{
    136          			usMaxDifference = usDifference;
    137          			usMaxJitter = usMaxDifference - timerEXPECTED_DIFFERENCE_VALUE;
    138          		}
    139          	}
    140          	else
    141          	{
    142          		/* Don't bother storing any values for the first couple of
    143          		interrupts. */
    144          		usSettleCount++;
    145          	}
    146          
    147          	/* Remember what the timer value was this time through, so we can calculate
    148          	the difference the next time through. */
    149          	usLastCount = usThisCount;
    150          
    151              TIM_ClearITPendingBit( TIM2, TIM_IT_Update );
    152          }
    153          
    154          
    155          
    156          
    157          
    158          
    159          
    160          

Errors: 9
Warnings: none
